# .gitlab-ci.yml

# Definiert das Docker-Image, das für alle Jobs in dieser Pipeline verwendet wird.
image: maven:3.9.6-eclipse-temurin-21-alpine

# Definiert die verschiedenen Phasen (Stages) unserer Pipeline.
stages:
  - build
  - test
  - report
  - deploy_report

# Definition von Umgebungsvariablen, die in den Jobs verwendet werden können.
variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showLogFileName=false"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Definiert einen Cache für Maven-Abhängigkeiten.
cache:
  paths:
    - .m2/repository

build_job:
  stage: build
  script:
    - echo "Building the project..."
    - mvn $MAVEN_CLI_OPTS compile
  artifacts:
    paths:
      - target/classes
      - target/test-classes
    expire_in: 1 hour

test_job:
  stage: test
  services:
    - selenium/standalone-chrome:latest
  variables:
    # Hostname für den Selenium-Service. SELENIUM_HOST ist immer noch der GitLab Alias
    SELENIUM_HOST: "selenium__standalone-chrome" 
    SELENIUM_PORT: "4444" 
  script: |
    echo "Running tests using Selenium Standalone Chrome service..."
    apk update && apk add --no-cache curl # curl ist bereits da, aber zur Sicherheit nochmal
    
    # Warte, bis der Selenium-Service gestartet und bereit ist
    echo "Waiting for Selenium Grid to be ready..."
    SELENIUM_URL="http://${SELENIUM_HOST}:${SELENIUM_PORT}/wd/hub"
    while ! curl -sSL "${SELENIUM_URL}/status" 2>&1 | grep -q "\"ready\": true"; do
      echo "Selenium Grid is not yet ready. Waiting..."
      sleep 1
    done
    echo "Selenium Grid is ready!"

    # --- WICHTIGE ÄNDERUNG HIER: Finde die IP-Adresse des Selenium-Services ---
    # Finde die IP-Adresse des Selenium-Containers und exportiere sie als Umgebungsvariable
    # Die IP des Service-Containers ist über seinen Alias im Docker-Netzwerk erreichbar.
    # Wir benutzen 'getent hosts' um die IP-Adresse des Hostnamens 'selenium__standalone-chrome' aufzulösen.
    SELENIUM_IP=$(getent hosts ${SELENIUM_HOST} | awk '{ print $1 ; exit }')
    
    if [ -z "$SELENIUM_IP" ]; then
      echo "Error: Could not resolve IP for Selenium service ${SELENIUM_HOST}. Aborting."
      exit 1
    fi
    
    # Exportiere die IP-Adresse als neue Umgebungsvariable
    export SELENIUM_REMOTE_IP="${SELENIUM_IP}"
    echo "Resolved Selenium IP: ${SELENIUM_REMOTE_IP}"
    # --- ENDE WICHTIGER ÄNDERUNG ---

    # Führe Tests mit Maven aus
    # Der Java-Code muss jetzt SELENIUM_REMOTE_IP statt SELENIUM_HOST nutzen!
    mvn $MAVEN_CLI_OPTS test -Dsurefire.useFile=false
  artifacts:
    paths:
      - target/allure-results
    expire_in: 1 day

generate_allure_report_job:
  stage: report # Gehört zur 'report'-Phase
  image: maven:3.9.6-eclipse-temurin-21-alpine # Verwende das gleiche Basis-Image wie für den Test-Job
  needs: ["test_job"] 
  script: |
    echo "Generating Allure report..."
    # Installiere curl, unzip und die Allure CLI manuell
    # wget ist bereits im Image, aber das Installieren stellt sicher, dass wir die "busybox" Version haben, falls nötig
    apk update && apk add --no-cache curl unzip wget
    
    # Allure CLI Version festlegen
    ALLURE_VERSION="2.27.0" 
    ALLURE_DOWNLOAD_URL="https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.zip"
    
    echo "Downloading Allure CLI version ${ALLURE_VERSION} from: ${ALLURE_DOWNLOAD_URL}"
    # --- WICHTIGE ÄNDERUNG HIER: Entferne --show-progress ---
    wget "${ALLURE_DOWNLOAD_URL}" -O /tmp/allure-commandline.zip # `--show-progress` entfernt
    # --- ENDE WICHTIGER ÄNDERUNG ---
    
    unzip /tmp/allure-commandline.zip -d /opt/allure-framework
    chmod +x /opt/allure-framework/allure-*/bin/allure # Mach das Allure Binary ausführbar
    export PATH="/opt/allure-framework/allure-${ALLURE_VERSION}/bin:$PATH" # Füge Allure zum PATH hinzu

    # Generiere den HTML-Report
    allure generate --clean target/allure-results -o target/allure-report
  artifacts:
    paths:
      - target/allure-report # Speichert den generierten HTML-Report
    expire_in: 1 week

pages:
  stage: deploy_report
  needs: ["generate_allure_report_job"]
  script:
    - echo "Deploying Allure report to GitLab Pages..."
    - mv target/allure-report/ public
  artifacts:
    paths:
      - public
  only:
    - master
    - main