stages:
  - build
  - test
  - deploy

variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

cache:
  paths:
    - .m2/repository
  key: "$CI_COMMIT_REF_SLUG"

build_job:
  stage: build
  image: maven:3.9.6-eclipse-temurin-21-alpine # Verwende ein Alpine-Image für Maven
  script:
    - echo "Building the project..."
    - mvn $MAVEN_CLI_OPTS compile
  artifacts:
    paths:
      - target/*.jar # Sammle das erstellte JAR-Artefakt
    expire_in: 1 week

test_job:
  stage: test
  image: maven:3.9.6-eclipse-temurin-21-alpine # Verwende ein Alpine-Image für Maven
  script:
    - echo "Running tests..."
    # Aktualisiere Paketlisten und installiere xvfb, Chromium, ALLE Abhängigkeiten UND die fehlende C++-Standardbibliothek
    # Hinzugefügt: libstdc++
    - apk update && apk add --no-cache xvfb chromium nss freetype fontconfig brotli libjpeg-turbo libpng libwebp libxml2 libxslt mesa-gl glib udev dbus-libs wget unzip libstdc++
    
    # Optional: Eine kurze Pause geben, falls die Systempfade noch aktualisiert werden müssen
    - sleep 5 

    # Finde den tatsächlichen Pfad des Xvfb-Binaries
    - X_VFB_BINARY=$(find /usr -maxdepth 3 -name "Xvfb" -type f -print -quit) || true
    
    # Fallback, falls 'find' nichts findet
    - if [ -z "$X_VFB_BINARY" ]; then echo "Error: Xvfb binary not found after installation!"; exit 1; fi

    # Startet Xvfb im Hintergrund auf Display :99
    - "$X_VFB_BINARY" :99 -screen 0 1280x1024x24 -ac &
    - export DISPLAY=:99
    - sleep 3 

    # ChromeDriver manuell herunterladen und konfigurieren
    - CHROMEDRIVER_VERSION="124.0.6367.91" 
    - CHROMEDRIVER_URL="https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip"
    
    - echo "Downloading ChromeDriver version ${CHROMEDR_VERSION} from: ${CHROMEDR_URL}"
    - wget -q --show-progress "${CHROMEDR_URL}" -O /tmp/chromedriver.zip

    # Entpacke den ChromeDriver
    - unzip /tmp/chromedriver.zip -d /tmp/chromedriver_extracted
    - mv /tmp/chromedriver_extracted/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver

    # Mach den ChromeDriver ausführbar
    - chmod +x /usr/local/bin/chromedriver

    # Setze die System Property für Selenium, damit es den manuell installierten Treiber nutzt
    - export JAVA_OPTS="-Dwebdriver.chrome.driver=/usr/local/bin/chromedriver"

    # Führe Tests mit Maven aus (verwende JAVA_OPTS, das den Treiber-Pfad setzt)
    - mvn $MAVEN_CLI_OPTS $JAVA_OPTS test -Dsurefire.useFile=false
  artifacts:
    paths:
      - target/allure-results # Die Allure-Ergebnisdateien werden hier gesammelt (JSON/XML).
    expire_in: 1 day # Behalte diese Ergebnisse für 1 Tag.

deploy_job:
  stage: deploy
  image: alpine/git # Ein einfaches Image mit Git
  script:
    - echo "Deploying the application..."
    # Hier würden deine Deployment-Schritte stehen.
    # Dies ist ein Platzhalter und muss an deine tatsächliche Deployment-Strategie angepasst werden.
    - echo "Deployment complete (placeholder)."
  when: manual