# Definierte Stages (Phasen) deiner CI/CD-Pipeline
stages:
  - build
  - test # Der Report Stage wird entfernt
  - report

# Job: Build-Phase (Kompilieren des Projekts)
build_job:
  stage: build
  image: maven:3.9.6-eclipse-temurin-17-focal # Nutze ein Maven-Image mit Java 17 (oder 11, passend zu deiner pom.xml)
  script:
    - echo "Building the project..."
    - mvn clean compile -DskipTests # Kompiliert das Projekt, überspringt Tests in dieser Phase
  artifacts:
    paths:
      - target/ # Speichert das target-Verzeichnis als Artefakt (optional, aber nützlich)
    expire_in: 1 day # Artefakte nach einem Tag löschen

# Job: Test-Phase (Ausführen der Selenium-Tests)
test_job:
  stage: test
  image: maven:3.9.6-eclipse-temurin-17-focal # Wieder Maven/Java Image
  services: # Hier definieren wir die Dienste, die für den Test notwendig sind
    - name: selenium/standalone-chrome:latest # Nutze ein vorgefertigtes Selenium Standalone Chrome Docker Image
      alias: selenium-hub # Der Hostname, unter dem der Selenium Hub erreichbar ist
  variables: # Umgebungsvariablen für deine TestSetup-Klasse
    SELENIUM_REMOTE_IP: selenium-hub # IP/Hostname des Selenium Hubs (der Alias von oben)
    SELENIUM_PORT: "4444" # Standard-Port für Selenium Grid
    # MAVEN_CLI_OPTS und MAVEN_OPTS kannst du lassen oder entfernen, sind optional.
    # MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
    # MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  script:
    - echo "Running Selenium tests..."
    - mvn test -Dsurefire.rerunFailingTestsCount=1 # Führt Tests aus
    - echo "Tests finished."
  artifacts:
    paths:
      - target/allure-results/ # Diese Artefakte sind SEHR WICHTIG! Sie enthalten die Rohdaten für den Allure Report.
    expire_in: 1 day # Behalte diese Artefakte für den lokalen Download

report_job:
  stage: report
  image: maven:3.9.6-eclipse-temurin-17-focal # Dieses Image hat Maven, was für allure:report ausreicht.
  script:
    - echo "Generating Allure Report..."
    # Sicherstellen, dass das Allure Commandline Tool verfügbar ist, falls mvn allure:report nicht funktioniert.
    # Alternativ könnten wir hier das Allure CLI manuell herunterladen und ausführen.
    # Aber wir versuchen es zuerst mit dem Maven Plugin, da es in der pom.xml definiert ist.
    # KEINE ${allure.maven.version} mehr, da Bash es nicht mag. Fester Wert!
    - mvn io.qameta.allure:allure-maven:2.22.0:report
    - echo "Allure Report generated."
  artifacts:
    paths:
      - target/site/allure-maven-plugin/ # Dieser Pfad enthält den generierten HTML-Report
    expose_as: 'Allure Report' # Macht den Link in der GitLab UI sichtbar
    expire_in: 1 week # Den Bericht für eine Woche aufbewahren
  when: always # Diesen Job immer ausführen, auch wenn Tests fehlschlagen
  dependencies:
    - test_job # Abhängigkeit vom test_job, um dessen Artefakte zu nutzen