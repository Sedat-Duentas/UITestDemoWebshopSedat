# Definierte Stages (Phasen) deiner CI/CD-Pipeline
stages:
  - build
  - test # Der Report Stage wird entfernt
  - report

# Job: Build-Phase (Kompilieren des Projekts)
build_job:
  stage: build
  image: maven:3.9.6-eclipse-temurin-17-focal # Nutze ein Maven-Image mit Java 17 (oder 11, passend zu deiner pom.xml)
  script:
    - echo "Building the project..."
    - mvn clean compile -DskipTests # Kompiliert das Projekt, überspringt Tests in dieser Phase
  artifacts:
    paths:
      - target/ # Speichert das target-Verzeichnis als Artefakt (optional, aber nützlich)
    expire_in: 1 day # Artefakte nach einem Tag löschen

# Job: Test-Phase (Ausführen der Selenium-Tests)
test_job:
  stage: test
  image: maven:3.9.6-eclipse-temurin-17-focal # Wieder Maven/Java Image
  services: # Hier definieren wir die Dienste, die für den Test notwendig sind
    - name: selenium/standalone-chrome:latest # Nutze ein vorgefertigtes Selenium Standalone Chrome Docker Image
      alias: selenium-hub # Der Hostname, unter dem der Selenium Hub erreichbar ist
  variables: # Umgebungsvariablen für deine TestSetup-Klasse
    SELENIUM_REMOTE_IP: selenium-hub # IP/Hostname des Selenium Hubs (der Alias von oben)
    SELENIUM_PORT: "4444" # Standard-Port für Selenium Grid
    # MAVEN_CLI_OPTS und MAVEN_OPTS kannst du lassen oder entfernen, sind optional.
    # MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
    # MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  script:
    - echo "Running Selenium tests..."
    - mvn test -Dsurefire.rerunFailingTestsCount=1 # Führt Tests aus
    - echo "Tests finished."
  artifacts:
    paths:
      - target/allure-results/ # Diese Artefakte sind SEHR WICHTIG! Sie enthalten die Rohdaten für den Allure Report.
    expire_in: 1 day # Behalte diese Artefakte für den lokalen Download

report_job:
  stage: report
  image: maven:3.9.6-eclipse-temurin-17-focal # Dieses Image sollte passen
  script:
    - echo "Generating Allure Report..."
    # 1. Allure Commandline Tool herunterladen und entpacken
    # Verwenden wir die gleiche Allure-Version, die auch in der pom.xml für JUnit5 definiert ist,
    # um Konsistenz zu gewährleisten (2.27.0). Die Maven-Plugin-Version 2.22.0 war das Problemkind.
    - ALLURE_VERSION="2.27.0" # Verwenden der Allure-Version aus allure-junit5
    - curl -o allure-commandline.zip -L https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.zip
    - unzip allure-commandline.zip
    - export PATH=$PATH:$(pwd)/allure-2.27.0/bin # Pfad zum Allure-Executable hinzufügen

    # 2. Allure Report generieren
    # Hier verwenden wir das heruntergeladene Allure CLI anstatt des Maven Plugins
    - allure generate target/allure-results --clean -o target/allure-report
    - echo "Allure Report generated."
  artifacts:
    paths:
      - target/site/allure-maven-plugin/ # Pfad zum generierten Allure Report
    expose_as: 'Allure Report'
    expire_in: 1 week
  when: always
  dependencies:
    - test_job