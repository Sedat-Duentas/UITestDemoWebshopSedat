# Definierte Stages (Phasen) deiner CI/CD-Pipeline
stages:
  - build
  - test
  - report

# Job: Build-Phase (Kompilieren des Projekts)
build_job:
  stage: build
  image: maven:3.9.6-eclipse-temurin-17-focal # Nutze ein Maven-Image mit Java 17 (oder 11, passend zu deiner pom.xml)
  script:
    - echo "Building the project..."
    - mvn clean compile -DskipTests # Kompiliert das Projekt, überspringt Tests in dieser Phase
  artifacts:
    paths:
      - target/ # Speichert das target-Verzeichnis als Artefakt (optional, aber nützlich)
    expire_in: 1 day # Artefakte nach einem Tag löschen

# Job: Test-Phase (Ausführen der Selenium-Tests)
test_job:
  stage: test
  image: maven:3.9.6-eclipse-temurin-17-focal # Wieder Maven/Java Image
  services: # Hier definieren wir die Dienste, die für den Test notwendig sind
    - name: selenium/standalone-chrome:latest # Nutze ein vorgefertigtes Selenium Standalone Chrome Docker Image
      alias: selenium-hub # Der Hostname, unter dem der Selenium Hub erreichbar ist
  variables: # Umgebungsvariablen für deine TestSetup-Klasse
    SELENIUM_REMOTE_IP: selenium-hub # IP/Hostname des Selenium Hubs (der Alias von oben)
    SELENIUM_PORT: "4444" # Standard-Port für Selenium Grid
    MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode" # Optional: Für schnellere Maven-Downloads
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository" # Optional: Für schnelleren Maven-Cache
  script:
    - echo "Running Selenium tests..."
    - mvn test -Dsurefire.rerunFailingTestsCount=1 # Führt Tests aus, optional: fehlerhafte Tests einmal wiederholen
    - echo "Tests finished."
  artifacts:
    paths:
      - target/allure-results/ # Speichert die Allure-Ergebnisse als Artefakte
    expire_in: 1 day

# Job: Report-Phase (Generieren und Veröffentlichen der Allure Reports)
report_job:
  stage: report
  image: maven:3.9.6-eclipse-temurin-17-focal # Oder ein eigenes Image mit Allure CLI, falls Maven nicht reicht
  script:
    - echo "Generating Allure Report..."
    # Da Allure Maven Plugin in pom.xml ist, kann man es direkt ausführen:
    - mvn allure:report # Generiert den Allure Report
    - echo "Allure Report generated."
  artifacts:
    paths:
      - target/site/allure-maven-plugin/ # Pfad zum generierten Allure Report
    expose_as: 'Allure Report' # Macht den Link zum Report in der GitLab UI sichtbar
    expire_in: 1 week # Bericht für eine Woche aufbewahren
  when: always # Diesen Job immer ausführen, auch wenn Tests fehlschlagen
  dependencies:
    - test_job # Abhängigkeit vom test_job, um dessen Artefakte zu nutzen