# .gitlab-ci.yml

# Definiert das Docker-Image, das für alle Jobs in dieser Pipeline verwendet wird.
image: maven:3-eclipse-temurin-19

services:
  - name: selenium/standalone-chrome:4.20.0 # Spezifische Version, stabiler
    alias: selenium # Alias wie bei Ihrem Freund

variables:
  SELENIUM_HOST: selenium # Host-Variable wie bei Ihrem Freund
  SELENIUM_PORT: 4444 # Port wie bei Ihrem Freund
  CI_ENV: "true" # <-- Wichtig: Dies signalisiert dem Java-Code die CI-Umgebung

# Definiert die verschiedenen Phasen (Stages) unserer Pipeline.
stages:
  - build
  - test
  - report
  - deploy_report # Für GitLab Pages Hosting des Allure Reports

# Definiert einen Cache für Maven-Abhängigkeiten.
cache:
  paths:
    - .m2/repository

before_script:
  - export DISPLAY=:99 # Für Headless-Browser
  - mvn --version

build_job:
  stage: build # Gehört zur 'build'-Phase
  script: # Die Befehle, die ausgeführt werden sollen
    - echo "Building project and downloading dependencies..."
    - mvn $MAVEN_CLI_OPTS clean install -DskipTests # Abhängigkeiten herunterladen und cachen
  artifacts: # Was dieser Job als "Ergebnis" für nachfolgende Jobs speichert
    paths:
      - target/classes
      - target/test-classes
    expire_in: 1 hour

# .gitlab-ci.yml (nur der test_job, die anderen Jobs bleiben gleich)

test_job:
  stage: test # Gehört zur 'test'-Phase
  script: | # Mehrzeiliger Shell-Skript
    echo "Running tests..."
    # Sicherstellen, dass AspectJ Weaver im Maven-Cache des Runners ist
    # durch den 'build_job' und den Maven-Cache.
    # Hier wird KEIN manueller wget/mkdir/chmod für AspectJ Weaver benötigt.
    
    # Warte auf Selenium Grid (dieser Teil bleibt)
    apk update && apk add --no-cache curl # curl für Health Check
    echo "Waiting for Selenium Grid to be ready..."
    SERVICE_IP=$(getent hosts ${SELENIUM_HOST} | awk '{ print $1 ; exit }')
    if [ -z "$SERVICE_IP" ]; then
      echo "Error: Could not resolve IP for Selenium service ${SELENIUM_HOST}. Aborting."
      exit 1
    fi
    export SELENIUM_REMOTE_IP="${SERVICE_IP}"
    echo "Resolved Selenium IP: ${SELENIUM_REMOTE_IP}"
    SELENIUM_REMOTE_URL_FOR_CHECK="http://${SELENIUM_REMOTE_IP}:${SELENIUM_PORT}/wd/hub/status"
    if [[ "${SELENIUM_REMOTE_IP}" == *:* ]]; then
      SELENIUM_REMOTE_URL_FOR_CHECK="http://[${SELENIUM_REMOTE_IP}]:${SELENIUM_PORT}/wd/hub/status"
    fi
    echo "Waiting for Selenium Grid at ${SELENIUM_REMOTE_URL_FOR_CHECK} to be ready (curl check)..."
    while ! curl -sSL "${SELENIUM_REMOTE_URL_FOR_CHECK}" 2>&1 | grep -q "\"ready\": true"; do
      echo "Selenium Grid is not yet ready. Waiting..."
      sleep 1
    done
    echo "Selenium Grid is ready!"

    # Führe Tests aus. Allure Ergebnisse werden in target/allure-results geschrieben.
    mvn $MAVEN_CLI_OPTS test -Dsurefire.useFile=false
  artifacts:
    paths:
      - target/allure-results # Der Allure-Ergebnisordner, der an den nächsten Job übergeben wird.
    when: always # Dies stellt sicher, dass Artefakte hochgeladen werden, auch wenn der Job fehlschlägt
    expire_in: 1 day

generate_allure_report_job:
  stage: report # Gehört zur 'report'-Phase
  image: maven:3.9.6-eclipse-temurin-21-alpine # Verwende das gleiche Basis-Image wie für den Test-Job
  needs:
    - job: test_job # Braucht den Test-Job
      artifacts: true # Fordert die Artefakte des Test-Jobs an (dies ist jetzt 'target/allure-results')
  when: always # Dies stellt sicher, dass dieser Job immer ausgeführt wird, auch wenn vorherige Jobs fehlschlagen
  script: |
    echo "Generating Allure report..."
    apk update && apk add --no-cache curl unzip wget # Tools für Allure CLI
    
    ALLURE_VERSION="2.27.0"
    ALLURE_DOWNLOAD_URL="https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.zip"
    echo "Downloading Allure CLI version ${ALLURE_VERSION} from: ${ALLURE_DOWNLOAD_URL}"
    wget "${ALLURE_DOWNLOAD_URL}" -O /tmp/allure-commandline.zip
    unzip /tmp/allure-commandline.zip -d /opt/allure-framework
    chmod +x /opt/allure-framework/allure-*/bin/allure
    export PATH="/opt/allure-framework/allure-${ALLURE_VERSION}/bin:$PATH"

    echo "Listing contents of ${CI_PROJECT_DIR}/target/allure-results (should contain test results):"
    ls -la ${CI_PROJECT_DIR}/target/allure-results/ || echo "${CI_PROJECT_DIR}/target/allure-results directory not found or empty."

    allure generate --clean ${CI_PROJECT_DIR}/target/allure-results -o target/allure-report
  artifacts:
    paths:
      - target/allure-report # Speichert den generierten HTML-Report
    expire_in: 1 week

pages:
  stage: deploy_report
  needs: ["generate_allure_report_job"]
  script:
    - echo "Deploying Allure report to GitLab Pages..."
    - mv target/allure-report/ public
  artifacts:
    paths:
      - public
  only:
    - master
    - main