# .gitlab-ci.yml

# Definiert das Docker-Image, das für alle Jobs in dieser Pipeline verwendet wird.
image: maven:3.9.6-eclipse-temurin-21-alpine

# Definiert die verschiedenen Phasen (Stages) unserer Pipeline.
stages:
  - build
  - test
  - report
  - deploy_report

# Definition von Umgebungsvariablen, die in den Jobs verwendet werden können.
variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showLogFileName=false"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Definiert einen Cache für Maven-Abhängigkeiten.
cache:
  paths:
    - .m2/repository

build_job:
  stage: build
  script:
    - echo "Building the project..."
    - mvn $MAVEN_CLI_OPTS compile
  artifacts:
    paths:
      - target/classes
      - target/test-classes
    expire_in: 1 hour

test_job:
  stage: test
  # --- WICHTIGE ÄNDERUNG HIER: `services` und `variables` für Remote WebDriver ---
  services: # Dieser Block definiert einen zusätzlichen Docker-Container, der parallel läuft
    - selenium/standalone-chrome:latest # Das offizielle Selenium Chrome Standalone Image
  variables:
    # Hostname für den Selenium-Service. GitLab erzeugt standardmäßig einen Hostnamen:
    # service_name -> service_name__alias -> selenium__standalone-chrome
    SELENIUM_HOST: "selenium__standalone-chrome" 
    SELENIUM_PORT: "4444" # Standard-Port für Selenium Grid/Standalone
  # --- ENDE WICHTIGER ÄNDERUNG ---
  script: | # Das Pipe-Symbol '|' bleibt hier korrekt
    echo "Running tests using Selenium Standalone Chrome service..."
    # Wir brauchen nur wget und unzip, falls wir sie für andere Dinge brauchen, aber nicht mehr für Chrome selbst.
    apk update && apk add --no-cache wget unzip curl # curl für den Health Check

    # Keine manuellen Xvfb oder Chromium/ChromeDriver Installationen mehr, da der Service das alles mitbringt.
    # Keine DISPLAY oder JAVA_OPTS für den lokalen ChromeDriver.

    # Warte, bis der Selenium-Service gestartet und bereit ist
    echo "Waiting for Selenium Grid to be ready..."
    while ! curl -sSL "http://${SELENIUM_HOST}:${SELENIUM_PORT}/wd/hub/status" 2>&1 | grep -q "\"ready\": true"; do
      echo "Selenium Grid is not yet ready. Waiting..."
      sleep 1
    done
    echo "Selenium Grid is ready!"

    # Führe Tests mit Maven aus
    # Der Java-Code wurde bereits auf RemoteWebDriver umgestellt und nutzt SELENIUM_HOST/PORT aus Umgebung
    mvn $MAVEN_CLI_OPTS test -Dsurefire.useFile=false
  artifacts:
    paths:
      - target/allure-results
    expire_in: 1 day

generate_allure_report_job:
  stage: report
  image: franklinz/allure:latest
  needs: ["test_job"]
  script:
    - echo "Generating Allure report..."
    - allure generate --clean target/allure-results -o target/allure-report
  artifacts:
    paths:
      - target/allure-report
    expire_in: 1 week

pages:
  stage: deploy_report
  needs: ["generate_allure_report_job"]
  script:
    - echo "Deploying Allure report to GitLab Pages..."
    - mv target/allure-report/ public
  artifacts:
    paths:
      - public
  only:
    - master
    - main